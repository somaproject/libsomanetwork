

Wow, this is a fantastic total rewrite of all of this shit. Damn. 

The new paradigm: the non-network ("control") thread passes to the
network thread an EventList of events. There are two exposed
functions:


sendEvents(const EventTXList_t & el) :
   Send the current event list to the network. This does not block
   unless there is something catastrophically wrong (like the sync
   fifo breaks). 

waitForEventTX():
   blocks until the pending-event queue is empty. This can be used to
   make sure we don't overwhelm the event bus when doing dumb things
   like streaming data. 

---------------------------------------------------------------------
Internally, we will use callbacks via the main network() epoll
pipe mechanism to handle the event transmission. That is, we need to
solve the problem of the main thread having blocked() waiting to
send. We could just use a conditional and a separate EventTX thread
here, but that requires considerable synchronization effort. 

There's this notion of a "pending" event, the one we are currently
working on. This is distinct from the event queue because it will
contain additional metadata and be a shared pointer with separate
thread saftey . 

newEventsWakeup() // an internal signal that gets called once for
every new event queue addition; the job here is to send the event if
there is not currently a pending one. 

