The "network" object is designed to be a complete independent
interface to all necessary soma-network functions. All of its external
API calls are to be thread-safe, and internally it spawns its own
threads (maybe more than one).

But to the rest of the application, Network looks like your standard single-threaded collection of data sources, with one exception: exposed pipes. 

Why pipes? Obviously, condion variables are the superior solution
here. In fact, i'm still not convinced that using pipes (and the
associated kernel trap) won't be awful for performace. But currently,
linux has no capacity to block on both conditionals and sockets. There
are future options such as kevents, but they are still very immature. 

Pipes represent a language-neutral platform-neutral solution. 

To configure network, we have:

enableDataRx(type, source)
disableDataRx(type, source) 
  creates / opens the socket for type/source on the relevsant port, creates the correct internal buffer. 

Network guarantees proper packet ordering, handling the necessary retx/etc. stuff. 

Each pipe has one byte of data written to it for each datagram pending
in the output queue. 

-------------------------
extracting data
-------------------------

There's the question of "do we extract one datagram or all datagrams?". I'm not sure what the best answer is here. I can't quite convince myself that a non-1:1 correspondence would be error-free. 

Network only understands the sequence and type/src id of each
datagram, and nothing beyond that. Thus we pass out: 

dataPackets
rawData* dataPop()
bvmethod, which will return either Null (if there is no data) or a pointer to a new data object. 

Note that we now own this object, and will have to call delete on it
ourselves.


-----------------
status: 
-----------------

there's a readStatus() function which returns a pre-defined status object, containing something that has yet to be defined. 

-------------------------------------------------------------
internal guts: 
-------------------------------------------------------------

We use our event dispatcher, and create eventsender and eventreceiver
on the stack; they are always enabled and ready to send events (etc); 

There are no data events created by default. 
