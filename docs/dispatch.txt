--------------------------------------------------------------------
Event Dispatcher
--------------------------------------------------------------------

This describes our attempt to create a thread-safe high-performance
socket event dispatch system based around epoll and boost::function. 

Requirements: 

Adding and deleting callbacks will be thread-safe, but will have poor
performance. That is, if in some other thread we have

dispatch.run(); 

we can call dispatch.addCallback(fd, callbackfunc)

and know that it will at some point update to reflect the new
callback. Deletes are similar.

We also maintain a list of "timeout" functions; these are called once
every epoll_wait wakeup or timeout. Thus too many timeout functions
would be bad for performance. The only place they are generally to be
used is for "retransmission request" timeouts. 

--------------------------------------------------
internal details
--------------------------------------------------

Internally we use a std::map<int fd, boost::function(callback)> to
dispatch the results of the epoll. 

Manipulation of both the timeouts list and the callback table are
protected by a corresponding mutex. 

We have an internal control endpoint; right now it just triggers the
eventual exit from the primary loop. 

