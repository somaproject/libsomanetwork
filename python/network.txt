This is our attempt to bridge the network interface in python by
wrapping the underlying object with boost::python. b

There are two underlying goals: 

   1. actually move the network processing into a separate thread

   2. allow that thread (or another thread? SURE WHY NOT!) to filter
      the event stream to match some criteria, so we can ignore events
      we don't care about (and thus not hose the python vm)

How do we pass events back ? 
	    

How do we filter? 
    (src, cmd, downsample)
    we'd like to be able to query and find out if we've dropped any packets

What sort of interface do we want? 

Ideally we want something we can use from the control app, the audio
app, etc. That means that, right now, it's Event only. 

an API of sorts: 

sendEvent():
receiveEvent(): would block in a python thread

setEventRXMask(): 

receiveEvent blocks on waiting for data, or inbound events, or
whatever.  It may block forever. It returns a list of Events. 


RX Mask interface: we say which events we (do, do not) want?:
  we settle on two modes, one where we rx all events, and another
  where we rx events with a certain cmd


We'd like to get single transferrs of large numbers of filtered, RX'd
events. We'd like there to be aggregation. Something like, b

acquire all events for 100 ms
if we acquired any, return them
   otherwise, don't wake up


